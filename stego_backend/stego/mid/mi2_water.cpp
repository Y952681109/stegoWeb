#define GLOBAL
#include "mi2_water.h"
#include "errordef.h"

#include "stdio.h"
#include "stdlib.h"
//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ï¢Îª
//ï¿½ï¿½ï¿½ï¿½(Ò»ï¿½Ö½ï¿½),Ë®Ó¡Í·("##"),Ë®Ó¡
//ï¿½ï¿½ï¿½Úµï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä¹ì¼£ï¿½ï¿½ï¿½Ò»ï¿½ï¿½midiï¿½Â¼ï¿½ï¿½ï¿½ï¿½ï¿½Ç°
//Ã¿ï¿½ï¿½ï¿½ï¿½Îª00 8x xx xx,ï¿½ï¿½ï¿½Úºï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ö½ÚµÄºï¿½ï¿½ï¿½Ö½ï¿?
////////////////////////////////////////////////////////

int MIDEmdWater2nd(void * pmsg, unsigned short msglen, 
				   void * psrc, unsigned long srclen, 
				   void * pdest, unsigned long * pdestlen)
{
//===========================================//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
 	 unsigned short addbytes;//ï¿½ï¿½Òªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ö½ï¿½ï¿½ï¿?
	 unsigned char * w;//Ë®Ó¡
	 unsigned char	wlen,//Ë®Ó¡+headï¿½ï¿½ï¿½ï¿½
		temp,track1,track2,head1,head2,head3,head4,type,
		finishflag=0;//0ï¿½ï¿½Ê¾Ã»ï¿½ï¿½Ç¶ï¿½ï¿½,1ï¿½ï¿½Ê¾ï¿½ï¿½Ç¶ï¿½ï¿½
	 unsigned int k,t,
		track;//ï¿½ì¼£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
	 unsigned long head,count;
	 int a,a1,a2;
 
//===========================================//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
	if((msglen<=0) || (msglen>30))
	{
		if(msglen==0)//Ë®Ó¡ï¿½ï¿½ï¿½ï¿½Îª0
			return(ERR_EMD_MSGZEROLEN);
		if(msglen<0)//Ë®Ó¡ï¿½ï¿½ï¿½ï¿½Ð¡ï¿½ï¿½0ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
			return(ERR_EMD_PARAWRONG);
		if(msglen>30)//Ë®Ó¡ï¿½ï¿½ï¿½È¹ï¿½ï¿½ï¿½
			return(ERR_EMD_MSGMAXLEN);
	}
	if(srclen<=0)//ï¿½ï¿½ï¿½å³¤ï¿½ï¿½Ð¡ï¿½ï¿½0ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
	{
		return(ERR_EMD_PARAWRONG);
	}

//===========================================//×¼ï¿½ï¿½Ë®Ó¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
	wlen=msglen+2; //Ë®Ó¡+headï¿½ï¿½ï¿½ï¿½
	w=(unsigned char *)malloc(wlen);
	if(w==NULL)
	{
		return(ERR_EMD_MEMLOW);
	}
	strcpy((char *)w,"##");//head
	memcpy(w+2,pmsg,msglen);//Ë®Ó¡
	mi2MemReadInit(psrc,srclen);

//	if(((1+wlen)*2)%3==0) //ï¿½ï¿½ï¿½ï¿½ÎªÒ»ï¿½ï¿½ï¿½Ó½ï¿½
	addbytes=(1+wlen)+16;
//	else
//		addbytes=((1+wlen)*2)/3*4+4;

	if((srclen+addbytes)>(*pdestlen))
	{
		free(w);
		return(ERR_EMD_MEMLOW);
	}
	(*pdestlen)=(srclen+addbytes);
	if(addbytes==0)
	{
		return(NORMAL);
	}
 	mi2MemWriteInit(pdest,(*pdestlen));
 	mi2MemCopyAll();
	count=0;

//===========================================//ï¿½ï¿½ï¿½ï¿½Ä¼ï¿½ï¿½ï¿½Ê?
	if(count==srclen)
	{
		free((void*)w);
		return(ERR_EMD_COVDATA);
	}
	mi2MemRead(&temp,1);//ï¿½Ä¼ï¿½ï¿½ï¿½Ê½ï¿½ï¿½ï¿½ï¿½
	mi2MemWriteSeek(1);
	count++;
	if(temp!=0x4d)
	{
		free((void*)w);
		return(ERR_EMD_COVTYPE);
	}
	if(count==srclen)
	{
		free((void*)w);
		return(ERR_EMD_COVDATA);
	}
	mi2MemRead(&temp,1);//ï¿½Ä¼ï¿½ï¿½ï¿½Ê½ï¿½ï¿½ï¿½ï¿½
	mi2MemWriteSeek(1);
	count++;
	if(temp!=0x54)
	{
		free((void*)w);
		return(ERR_EMD_COVTYPE);
	}
	if(count>=srclen)
	{
		free((void*)w);
		return(ERR_EMD_COVDATA);
	}
	mi2MemRead(&temp,1);//ï¿½Ä¼ï¿½ï¿½ï¿½Ê½ï¿½ï¿½ï¿½ï¿½
	mi2MemWriteSeek(1);
	count++;
	if(temp!=0x68)
	{
		free((void*)w);
		return(ERR_EMD_COVTYPE);
	}
	if(count>=srclen)
	{
		free((void*)w);
		return(ERR_EMD_COVDATA);
	}
	mi2MemRead(&temp,1);//ï¿½Ä¼ï¿½ï¿½ï¿½Ê½ï¿½ï¿½ï¿½ï¿½
	mi2MemWriteSeek(1);
	count++;
	if(temp!=0x64)
	{
		free((void*)w);
		return(ERR_EMD_COVTYPE);
	}

	if((count+3)>=srclen)
	{
		free((void*)w);
		return(ERR_EMD_COVDATA);
	}
	a=mi2MemReadSeek(4);
	if(a!=0)//ï¿½ï¿½4ï¿½ï¿½ï¿½Ö½ï¿½Ò²Ã»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ëµï¿½ï¿½ï¿½Ä¼ï¿½ï¿½ï¿½Ê½ï¿½ï¿½ï¿½ï¿½
	{
		free((void*)w);
		return(ERR_EMD_COVTYPE);
	}
	mi2MemWriteSeek(4);
	count+=4;

	if(count==srclen)
	{
		free((void*)w);
		return(ERR_EMD_COVDATA);
	}
	a=mi2MemReadSeek(1);//ï¿½Ð¶ï¿½ï¿½Ä¼ï¿½ï¿½ï¿½ï¿½ï¿½
	if(a!=0)
	{
		free((void*)w);
		return(ERR_EMD_COVTYPE);
	}
	mi2MemWriteSeek(1);
	count++;
	if(count==srclen)
	{
		free((void*)w);
		return(ERR_EMD_COVDATA);
	}
	a=mi2MemReadSeek(1);
	if(a!=0)
	{
		free((void*)w);
		return(ERR_EMD_COVTYPE);
	}
	count++;
	type=1;
	mi2MemWrite(&type,1);//ï¿½Þ¸ï¿½ï¿½Ä¼ï¿½ï¿½ï¿½ï¿½Í£ï¿½ï¿½ï¿½Îª1
	
	if(count==srclen)
	{
		free((void*)w);
		return(ERR_EMD_COVDATA);
	}
	a1=mi2MemRead(&track1,1);
	count++;
	if(count==srclen)
	{
		free((void*)w);
		return(ERR_EMD_COVDATA);
	}
	a2=mi2MemRead(&track2,1);
	count++;
	a=a1+a2;
	if(a<2)//ï¿½ï¿½2ï¿½ï¿½ï¿½Ö½ï¿½Ò²Ã»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ëµï¿½ï¿½ï¿½Ä¼ï¿½ï¿½ï¿½Ê½ï¿½ï¿½ï¿½ï¿½
	{
		free((void*)w);
		return(ERR_EMD_COVTYPE);
	}
//	mi2MemWriteSeek(2);
	track=track1*256+track2;//ï¿½ì¼£ï¿½ï¿½ï¿½ï¿½ï¿?
	track++;//ï¿½ì¼£ï¿½ï¿½ï¿?1ï¿½ï¿½ï¿½ï¿½Ð´ï¿½ï¿½È¥
	track1=track/256;
	track2=track%256;
	mi2MemWrite(&track1,1);
	mi2MemWrite(&track2,1);

	if((count+1)>=srclen)
	{
		free((void*)w);
		return(ERR_EMD_COVDATA);
	}
	mi2MemReadSeek(2);
	mi2MemWriteSeek(2);
	count+=2;

//===========================================//Ç¶ï¿½ï¿½Ë®Ó¡
	//ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ì¼£ï¿½é£¬Ò²ï¿½ï¿½ï¿½ï¿½×¢ï¿½Í¿é£¬ï¿½ï¿½ï¿½Ðµï¿½×¢ï¿½Í¾ï¿½ï¿½ï¿½Ë®Ó¡2
	temp=0x4d;//ï¿½ì¼£ï¿½ï¿½ï¿½Í?
	mi2MemWrite(&temp,1);
	temp=0x54;
	mi2MemWrite(&temp,1);
	temp=0x72;
	mi2MemWrite(&temp,1);
	temp=0x6b;
	mi2MemWrite(&temp,1);

	head=(unsigned long)(wlen+1+8);//ï¿½ì¼£ï¿½é³¤ï¿½ï¿½
	head1=(unsigned char)(head/16777216);
	head2=(unsigned char)((head-head1*16777216)/65536);
	head3=(unsigned char)((head-head1*16777216-head2*65536)/256);
	head4=(unsigned char)(head-head1*16777216-head2*65536-head3*256);
	mi2MemWrite(&head1,1);
	mi2MemWrite(&head2,1);
	mi2MemWrite(&head3,1);
	mi2MemWrite(&head4,1);

	temp=0;//ffÖ¸ï¿½ï¿½Í·
	mi2MemWrite(&temp,1);
	temp=0xff;
	mi2MemWrite(&temp,1);
	temp=1;
	mi2MemWrite(&temp,1);
	temp=wlen+1;
	mi2MemWrite(&temp,1);

	temp=wlen;//Ç¶ï¿½ï¿½Ë®Ó¡
	mi2MemWrite(&temp,1);
	for(k=0;k<wlen;k++)
	{
		temp=w[k];
		mi2MemWrite(&temp,1);
	}
	
	temp=0;//ï¿½ì¼£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½00 FF 2F 00
	mi2MemWrite(&temp,1);
	temp=0xff;
	mi2MemWrite(&temp,1);
	temp=0x2f;
	mi2MemWrite(&temp,1);
	temp=0;
	mi2MemWrite(&temp,1);

	t=1;//ï¿½ï¿½Ç°ï¿½ì¼£ï¿½ï¿½
	while(t<track)
	{
		if(count==srclen)
		{
			free((void*)w);
			return(ERR_EMD_COVDATA);
		}
		mi2MemRead(&temp,1);
		mi2MemWrite(&temp,1);
		count++;
		if(temp!=0x4d)
		{
			free((void*)w);
			return(ERR_EMD_COVTYPE);
		}
		if(count==srclen)
		{
			free((void*)w);
			return(ERR_EMD_COVDATA);
		}
		mi2MemRead(&temp,1);
		mi2MemWrite(&temp,1);
		count++;
		if(temp!=0x54)
		{
			free((void*)w);
			return(ERR_EMD_COVTYPE);
		}
		if(count==srclen)
		{
			free((void*)w);
			return(ERR_EMD_COVDATA);
		}
		mi2MemRead(&temp,1);
		mi2MemWrite(&temp,1);
		count++;
		if(temp!=0x72)
		{
			free((void*)w);
			return(ERR_EMD_COVTYPE);
		}
		if(count==srclen)
		{
			free((void*)w);
			return(ERR_EMD_COVDATA);
		}
		mi2MemRead(&temp,1);
		mi2MemWrite(&temp,1);
		count++;
		if(temp!=0x6b)
		{
			free((void*)w);
			return(ERR_EMD_COVTYPE);
		}

		if(count==srclen)
		{
			free((void*)w);
			return(ERR_EMD_COVDATA);
		}
		mi2MemRead(&head1,1);
		mi2MemWrite(&head1,1);
		count++;
		if(count==srclen)
		{
			free((void*)w);
			return(ERR_EMD_COVDATA);
		}
		mi2MemRead(&head2,1);
		mi2MemWrite(&head2,1);
		count++;
		if(count==srclen)
		{
			free((void*)w);
			return(ERR_EMD_COVDATA);
		}
		mi2MemRead(&head3,1);
		mi2MemWrite(&head3,1);
		count++;
		if(count==srclen)
		{
			free((void*)w);
			return(ERR_EMD_COVDATA);
		}
		mi2MemRead(&head4,1);
		mi2MemWrite(&head4,1);
		count++;
		head=head1*256+head2;
		head=head*256+head3;
		head=head*256+head4;//headï¿½ï¿½Â¼ï¿½ï¿½Ä³ï¿½ï¿½ï¿?

		if((count+head-1)>=srclen)
		{
			free((void*)w);
			return(ERR_EMD_COVDATA);
		}
		for(k=1;k<=head;k++)
		{
			mi2MemRead(&temp,1);
			mi2MemWrite(&temp,1);
		}
		count+=head;
		t++;
	}
	free((void*)w);
	return(NORMAL);
}

//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-//Ë®Ó¡ï¿½ï¿½È¡ï¿½ã·¨2
int MIDExtWater2nd(void * psrc, unsigned long srclen, 
				   void * pmsg, unsigned short * pmsglen)
{
//===========================================//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
	unsigned char* w;//Ë®Ó¡+head
	unsigned char	wlen,//Ë®Ó¡ï¿½ï¿½ï¿½ï¿½
		beforetemp,temp,track1,track2,head1,head2,head3,head4,
		flag=0,//0ï¿½ï¿½Ê¾ÒªÇ¶ï¿½ï¿½Ë®Ó¡ï¿½ï¿½ï¿½È£ï¿½1ï¿½ï¿½Ê¾ÒªÇ¶ï¿½ï¿½Ë®Ó¡ï¿½ï¿½ï¿½ï¿½
		half=0;//0ï¿½ï¿½Ê¾Ç¶ï¿½ï¿½ï¿?4Î»ï¿½ï¿½1ï¿½ï¿½Ê¾Ç¶ï¿½ï¿½ï¿?4Î»
	unsigned int k,t,
		track;//ï¿½ì¼£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
	unsigned long head,j,count;
	int a,a1,a2;

//===========================================//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
	if(srclen<10)
	{
		(*pmsglen)=0;
		return(ERR_EXT_PARAWRONG);
	}

//===========================================//×¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
	w=(unsigned char *)malloc(35);
	if(w==NULL)
	{
		(*pmsglen)=0;
		return(ERR_EXT_MEMLOW);
	}
    mi2MemReadInit(psrc,srclen);
	count=0;

//===========================================//ï¿½ï¿½ï¿½ï¿½Ä¼ï¿½ï¿½ï¿½Ê?
	if(count==srclen)
	{
		(*pmsglen)=0;
		free((void*)w);
		return(ERR_EXT_COVDATA);
	}
	mi2MemRead(&temp,1);
	count++;
	if(temp!=0x4d)//ï¿½Ä¼ï¿½ï¿½ï¿½Ê½ï¿½ï¿½ï¿½ï¿½
	{
		(*pmsglen)=0;
		free(w);
		return(ERR_EXT_COVTYPE);
	}
	if(count==srclen)
	{
		(*pmsglen)=0;
		free((void*)w);
		return(ERR_EXT_COVDATA);
	}
	mi2MemRead(&temp,1);
	count++;
	if(temp!=0x54)//ï¿½Ä¼ï¿½ï¿½ï¿½Ê½ï¿½ï¿½ï¿½ï¿½
	{
		(*pmsglen)=0;
		free(w);
		return(ERR_EXT_COVTYPE);
	}
	if(count==srclen)
	{
		(*pmsglen)=0;
		free((void*)w);
		return(ERR_EXT_COVDATA);
	}
	mi2MemRead(&temp,1);
	count++;
	if(temp!=0x68)//ï¿½Ä¼ï¿½ï¿½ï¿½Ê½ï¿½ï¿½ï¿½ï¿½
	{
		(*pmsglen)=0;
		free(w);
		return(ERR_EXT_COVTYPE);
	}
	if(count==srclen)
	{
		(*pmsglen)=0;
		free((void*)w);
		return(ERR_EXT_COVDATA);
	}
	mi2MemRead(&temp,1);
	count++;
	if(temp!=0x64)//ï¿½Ä¼ï¿½ï¿½ï¿½Ê½ï¿½ï¿½ï¿½ï¿½
	{
		(*pmsglen)=0;
		free(w);
		return(ERR_EXT_COVTYPE);
	}
	
	if((count+5)>=srclen)
	{
		(*pmsglen)=0;
		free((void*)w);
		return(ERR_EXT_COVDATA);
	}
	a=mi2MemReadSeek(6);
	count+=6;
	if(a!=0)//ï¿½ï¿½6ï¿½ï¿½ï¿½Ö½ï¿½Ò²Ã»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ëµï¿½ï¿½ï¿½Ä¼ï¿½ï¿½ï¿½Ê½ï¿½ï¿½ï¿½ï¿½
	{
		(*pmsglen)=0;
		free((void*)w);
		return(ERR_EXT_COVTYPE);
	}

	if(count==srclen)
	{
		(*pmsglen)=0;
		free((void*)w);
		return(ERR_EXT_COVDATA);
	}
	a1=mi2MemRead(&track1,1);
	count++;
	if(count==srclen)
	{
		(*pmsglen)=0;
		free((void*)w);
		return(ERR_EXT_COVDATA);
	}
	a2=mi2MemRead(&track2,1);
	count++;
	a=a1+a2;
	if(a<2)//ï¿½ï¿½2ï¿½ï¿½ï¿½Ö½ï¿½Ò²Ã»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ëµï¿½ï¿½ï¿½Ä¼ï¿½ï¿½ï¿½Ê½ï¿½ï¿½ï¿½ï¿½
	{
		(*pmsglen)=0;
		free((void*)w);
		return(ERR_EXT_COVTYPE);
	}
	track=track1*256+track2;//ï¿½ì¼£ï¿½ï¿½ï¿½ï¿½ï¿?
	if((count+1)>=srclen)
	{
		(*pmsglen)=0;
		free((void*)w);
		return(ERR_EXT_COVDATA);
	}
	mi2MemReadSeek(2);
	count+=2;
	
//===========================================//ï¿½ï¿½È¡Ë®Ó¡
	t=0;
	while(t<track)
	{
		if(count==srclen)
		{
			(*pmsglen)=0;
			free((void*)w);
			return(ERR_EXT_COVDATA);
		}
		mi2MemRead(&temp,1);
		count++;
		if(temp!=0x4d)
		{
			(*pmsglen)=0;
			free(w);
			return(ERR_EXT_COVTYPE);
		}
		if(count==srclen)
		{
			(*pmsglen)=0;
			free((void*)w);
			return(ERR_EXT_COVDATA);
		}
		mi2MemRead(&temp,1);
		count++;
		if(temp!=0x54)
		{
			(*pmsglen)=0;
			free(w);
			return(ERR_EXT_COVTYPE);
		}
		if(count==srclen)
		{
			(*pmsglen)=0;
			free((void*)w);
			return(ERR_EXT_COVDATA);
		}
		mi2MemRead(&temp,1);
		count++;
		if(temp!=0x72)
		{
			(*pmsglen)=0;
			free(w);
			return(ERR_EXT_COVTYPE);
		}
		if(count==srclen)
		{
			(*pmsglen)=0;
			free((void*)w);
			return(ERR_EXT_COVDATA);
		}
		mi2MemRead(&temp,1);
		count++;
		if(temp!=0x6b)
		{
			(*pmsglen)=0;
			free(w);
			return(ERR_EXT_COVTYPE);
		}
		if(count==srclen)
		{
			(*pmsglen)=0;
			free((void*)w);
			return(ERR_EXT_COVDATA);
		}
		mi2MemRead(&head1,1);
		count++;
		if(count==srclen)
		{
			(*pmsglen)=0;
			free((void*)w);
			return(ERR_EXT_COVDATA);
		}
		mi2MemRead(&head2,1);
		count++;
		if(count==srclen)
		{
			(*pmsglen)=0;
			free((void*)w);
			return(ERR_EXT_COVDATA);
		}
		mi2MemRead(&head3,1);
		count++;
		if(count==srclen)
		{
			(*pmsglen)=0;
			free((void*)w);
			return(ERR_EXT_COVDATA);
		}
		mi2MemRead(&head4,1);
		count++;
		head=head1*256+head2;
		head=head*256+head3;
		head=head*256+head4;//headï¿½ï¿½Â¼ï¿½ï¿½Ä³ï¿½ï¿½ï¿?

		j=0;
		while(j<head-4)//Ò»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä¹ì¼£ï¿½é¿ªÊ¼
		{
			if(count==srclen)
			{
				free((void*)w);
				return(ERR_EMD_COVDATA);
			}
			mi2MemRead(&temp,1);
			mi2MemWriteSeek(1);
			count++;
			j++;

			if(j<head-4 && (temp & 0x80)==0)//ï¿½Ç²ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Î»Î?0ï¿½ï¿½Ëµï¿½ï¿½ï¿½ï¿½ï¿½Ó³Ù£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½Ö½ï¿½Ó¦ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
			{
				beforetemp=temp;

				if(count==srclen)
				{
					free((void*)w);
					return(ERR_EMD_COVDATA);
				}
				mi2MemRead(&temp,1);//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
				mi2MemWriteSeek(1);
				count++;
				j++;

				if(temp==0xf0 || temp==0xf2)//f0,f2ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
				{
					if((count+1)>=srclen)
					{
						free((void*)w);
						return(ERR_EMD_COVDATA);
					}
					mi2MemReadSeek(2);
					mi2MemWriteSeek(2);
					count+=2;
					j+=2;
				}
				if(temp==0xf3)//f3ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
				{
					if(count==srclen)
					{
						free((void*)w);
						return(ERR_EMD_COVDATA);
					}
					mi2MemReadSeek(1);
					mi2MemWriteSeek(1);
					count++;
					j++;
				}
				if(temp==0xff)//ffï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ö½Ú¸ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò²ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ø·ï¿½ï¿½ï¿½È¡Ë®Ó¡
				{
					if(count==srclen)
					{
						free((void*)w);
						return(ERR_EMD_COVDATA);
					}
					mi2MemRead(&temp,1);
					mi2MemWriteSeek(1);
					count++;
					j++;
					if(temp!=1)//ï¿½ï¿½ï¿½Ö¸ï¿½ï¿½ï¿½ï¿½Ã»ï¿½ï¿½Ë®Ó?
					{
						if(count==srclen)
						{
							free((void*)w);
							return(ERR_EMD_COVDATA);
						}
						mi2MemRead(&beforetemp,1);
						mi2MemWriteSeek(1);
						count++;
						j++;
						if((count+beforetemp-1)>=srclen)
						{
							free((void*)w);
							return(ERR_EMD_COVDATA);
						}
						mi2MemReadSeek(beforetemp);
						mi2MemWriteSeek(beforetemp);
						count+=beforetemp;
						j+=beforetemp;
					}
					else//temp==1ï¿½ï¿½Ö¸ï¿½ï¿½ï¿½ï¿½ï¿½Ð¿ï¿½ï¿½ï¿½ï¿½ï¿½Ë®Ó¡
					{
						if(count==srclen)
						{
							free((void*)w);
							return(ERR_EMD_COVDATA);
						}
						mi2MemRead(&beforetemp,1);//Ö¸ï¿½ï¿½Ä³ï¿½ï¿½È£ï¿½Ò²ï¿½ï¿½ï¿½ï¿½wlen+1
						wlen=beforetemp;
						mi2MemWriteSeek(1);
						count++;
						j++;
						if(count==srclen)
						{
							free((void*)w);
							return(ERR_EMD_COVDATA);
						}
						mi2MemRead(&temp,1);//Ë®Ó¡ï¿½ï¿½ï¿½È£ï¿½Ò²ï¿½ï¿½ï¿½ï¿½wlen
						mi2MemWriteSeek(1);
						count++;
						j++;
						if((beforetemp-temp)==1)//ï¿½Ð¿ï¿½ï¿½ï¿½ï¿½ï¿½Ë®Ó¡
						{
							if(count==srclen)
							{
								free((void*)w);
								return(ERR_EMD_COVDATA);
							}
							mi2MemRead(&beforetemp,1);//Ë®Ó¡ï¿½ï¿½Ö¾
							mi2MemWriteSeek(1);
							count++;
							j++;
							if(count==srclen)
							{
								free((void*)w);
								return(ERR_EMD_COVDATA);
							}
							mi2MemRead(&temp,1);//Ë®Ó¡ï¿½ï¿½Ö¾
							mi2MemWriteSeek(1);
							count++;
							j++;
							if(beforetemp=='#' && temp=='#')//È·Êµï¿½ï¿½Ë®Ó¡
							{
								wlen--;
								for(k=0;k<(unsigned int)(wlen-2);k++)
								{
									mi2MemRead(&temp,1);
									w[k]=temp;
								}
								memcpy(pmsg,w,wlen-2);
								free((void*)w);
								*pmsglen=wlen-2;
								return(NORMAL);
							}
							else//Ã»ï¿½ï¿½Ë®Ó¡ï¿½ï¿½ï¿½Ñ¾ï¿½ï¿½ï¿½ï¿½ï¿½Ë®Ó¡ï¿½ï¿½Ö¾ï¿½ï¿½
							{
								wlen-=3;
								if((count+wlen-1)>=srclen)
								{
									free((void*)w);
									return(ERR_EMD_COVDATA);
								}
								mi2MemReadSeek(wlen);
								mi2MemWriteSeek(wlen);
								count+=wlen;
								j+=wlen;
							}
						}
						else//if((beforetemp-temp)==1)Ã»ï¿½ï¿½Ë®Ó¡ï¿½ï¿½ï¿½Ñ¾ï¿½ï¿½ï¿½ï¿½ï¿½Ë®Ó¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
						{
							wlen--;
							if((count+wlen-1)>=srclen)
							{
								free((void*)w);
								return(ERR_EMD_COVDATA);
							}
							mi2MemReadSeek(wlen);
							mi2MemWriteSeek(wlen);
							count+=wlen;
							j+=wlen;
						}
					}
				}
				if(temp>=0xc0 && temp<=0xcf)//cxï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
				{
					if(count==srclen)
					{
						free((void*)w);
						return(ERR_EMD_COVDATA);
					}
					mi2MemReadSeek(1);
					mi2MemWriteSeek(1);
					count++;
					j++;
				}

				if(temp>=0x80 && temp<=0xbf)//8x,9x,ax,bxï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
				{
					if((count+1)>=srclen)
					{
						free((void*)w);
						return(ERR_EMD_COVDATA);
					}
					mi2MemReadSeek(2);
					mi2MemWriteSeek(2);
					count+=2;
					j+=2;
				}//8x,9x,ax,bx
			}
		}//while(i<wlen && j<head-4)
		if((count+(head-j)-1)>=srclen)
		{
			free((void*)w);
			return(ERR_EMD_COVDATA);
		}
		mi2MemReadSeek(head-j);
		mi2MemWriteSeek(head-j);
		count+=(head-j);
		t++;
	}
	(*pmsglen)=0;
	free((void*)w);
	return(ERR_EXT_NOMSG);
}